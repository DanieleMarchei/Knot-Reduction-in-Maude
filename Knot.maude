fmod GAUSS-CODE is

    protecting INT .
    sorts NeGauss Gauss .

    subsorts Int < NeGauss < Gauss .

    op [] : -> Gauss [ctor] .

    op _;_ : Int Int -> NeGauss [assoc prec 0 ctor] .
    op _;_ : Int Gauss -> NeGauss [ditto] .
    op _;_ : Gauss Gauss -> Gauss [ditto] .  

    op remove_from_ : Int NeGauss -> Gauss .
    op length : Gauss -> Int .
    op positionOf_in_ : Int NeGauss -> Int .

    vars G G' : Gauss . 
    var NeG : NeGauss .
    var I K : Int .

    eq G ; [] = G .
    eq [] ; G = G .

    eq remove I from G ; I = G .
    eq remove I from I ; G = G .
    eq remove I from G ; (I ; G') = G ; G' .

    eq length([]) = 0 .
    eq length(I) = 1 .
    eq length(I ; G) = 1 + length(G) .

    --- I is found
    eq positionOf I in [] = -1 .
    eq positionOf I in I = 0 .
    eq positionOf I in I ; G = 0 .
    eq positionOf I in G ; I = length(G) .
    eq positionOf I in G ; (I ; G') = length(G) .
    --- I is not found
    eq positionOf I in K = -1 .
    eq positionOf I in K ; G = -1 .
    eq positionOf I in G ; K = -1 .
    eq positionOf I in G ; (K ; G') = -1 .

endfm


--- Work In Progress

fmod KNOT-DEFINITION is

    protecting GAUSS-CODE .

    sort Knot .

    op unknot : -> Knot .
    op red : Knot -> Knot .

endfm