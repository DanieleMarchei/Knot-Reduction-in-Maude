fmod GAUSS-CODE is

    protecting INT .
    sorts NeGauss Gauss .

    subsorts Int < NeGauss < Gauss .

    op [] : -> Gauss [ctor] .

    op _;_ : Int Int -> NeGauss [assoc ctor] .
    op _;_ : Int Gauss -> NeGauss [ditto] .
    op _;_ : Gauss Gauss -> Gauss [ditto] .  

    op remove_from_ : Int NeGauss -> Gauss .
    op length : Gauss -> Int .
    op positionOf_in_ : Int NeGauss -> Int .
    op add_in_to_ : Int Int Gauss -> NeGauss .
    op move_to_in_ : Int Int NeGauss -> NeGauss .

    vars G G' : Gauss . 
    var NeG : NeGauss .
    vars I K : Int .

    --- concatenation is commutative if one gauss code is the empty one 
    eq G ; [] = G .
    eq [] ; G = G .

    --- REMOVE OPERATION
    eq remove I from G ; I = G .
    eq remove I from I ; G = G .
    eq remove I from G ; (I ; G') = G ; G' .

    --- LENGTH OPERATION
    eq length([]) = 0 .
    eq length(I) = 1 .
    eq length(I ; G) = 1 + length(G) .

    --- POSITION OPERATION
    --- I is found
    eq positionOf I in I = 0 .
    eq positionOf I in I ; G = 0 .
    eq positionOf I in G ; I = length(G) .
    eq positionOf I in G ; (I ; G') = length(G) .
    --- I is not found
    eq positionOf I in [] = -1 .
    ceq positionOf I in K = -1 if I =/= K .
    ceq positionOf I in K ; G = -1 if I =/= K .
    ceq positionOf I in G ; K = -1 if I =/= K .
    ceq positionOf I in G ; (K ; G') = -1 if I =/= K .

    --- ADD OPERATOR
    eq add I in K to [] = I .
    ceq add I in K to G = G ; I if K = length(G) .
    eq add I in 0 to G = I ; G .
    ceq add I in K to G ; G' = G ; (I ; G') if K = length(G) .

    --- MOVE OPERATION
    eq move I to K in G = ( add I in K to ( remove I from G ) ) .
 

endfm


--- Work In Progress

fmod KNOT-DEFINITION is

    protecting GAUSS-CODE .

    sort Knot .

    op unknot : -> Knot .
    op red : Knot -> Knot .

endfm